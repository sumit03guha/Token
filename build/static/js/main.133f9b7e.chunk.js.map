{"version":3,"sources":["components/Button.js","App.js","index.js"],"names":["ButtonMeta","useState","buttonText","setButtonText","isDisabled","setDisabled","accounts","setAccounts","onboarding","useRef","useEffect","current","MetaMaskOnboarding","isMetaMaskInstalled","length","stopOnboarding","handleNewAccounts","newAccounts","window","ethereum","request","method","then","on","off","Button","disabled","content","onClick","startOnboarding","basic","color","floated","App","provider","web3","tokenSale_abi","tokenSale","abi","token_abi","token","price","setPrice","balance","setBalance","account","setAccount","value","setValue","setContent","loading","setLoading","tokenInstance","setTokenInstance","tokenSaleInstance","setTokenSaleInstance","success","setSuccess","supply","setSupply","Web3","providers","HttpProvider","loadBlockchain","a","eth","Contract","instance","utils","methods","tokenPrice","call","p","fromWei","getAccounts","onSubmit","e","preventDefault","buyToken","send","from","toWei","toString","message","console","log","balanceOf","b","instance1","instance2","options","address","t","Container","textAlign","style","marginTop","Header","as","href","Form","error","Field","Input","placeholder","action","onChange","target","Message","Progress","total","progress","label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.133f9b7e.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport MetaMaskOnboarding from '@metamask/onboarding';\r\n\r\nconst ButtonMeta = () => {\r\n  const ONBOARD_TEXT = 'Click here to install MetaMask!';\r\n  const CONNECT_TEXT = 'Connect Metamask';\r\n  const CONNECTED_TEXT = 'Metamask is Connected';\r\n\r\n  const [buttonText, setButtonText] = useState(ONBOARD_TEXT);\r\n  const [isDisabled, setDisabled] = useState(false);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const onboarding = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!onboarding.current) {\r\n      onboarding.current = new MetaMaskOnboarding();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\r\n      if (accounts.length > 0) {\r\n        setButtonText(CONNECTED_TEXT);\r\n        setDisabled(true);\r\n        onboarding.current.stopOnboarding();\r\n      } else {\r\n        setButtonText(CONNECT_TEXT);\r\n        setDisabled(false);\r\n      }\r\n    }\r\n  }, [accounts]);\r\n\r\n  useEffect(() => {\r\n    function handleNewAccounts(newAccounts) {\r\n      setAccounts(newAccounts);\r\n    }\r\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\r\n      window.ethereum\r\n        .request({ method: 'eth_requestAccounts' })\r\n        .then(handleNewAccounts);\r\n      window.ethereum.on('accountsChanged', handleNewAccounts);\r\n      return () => {\r\n        window.ethereum.off('accountsChanged', handleNewAccounts);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const onClick = () => {\r\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\r\n      window.ethereum\r\n        .request({ method: 'eth_requestAccounts' })\r\n        .then((newAccounts) => setAccounts(newAccounts));\r\n    } else {\r\n      onboarding.current.startOnboarding();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        disabled={isDisabled}\r\n        content={buttonText}\r\n        onClick={onClick}\r\n        basic\r\n        color='red'\r\n        floated='right'\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ButtonMeta;\r\n","import './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport Web3 from 'web3';\nimport tokenSale from './build/contracts/DappTokenSale.json';\nimport token from './build/contracts/DappToken.json';\nimport {\n  Form,\n  Input,\n  Container,\n  Message,\n  Header,\n  Progress,\n} from 'semantic-ui-react';\nimport ButtonMeta from './components/Button';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const tokenSale_abi = tokenSale.abi;\n  const token_abi = token.abi;\n\n  const [price, setPrice] = useState('');\n  const [balance, setBalance] = useState('0');\n  const [account, setAccount] = useState('Wallet not connected');\n  const [value, setValue] = useState('');\n  const [content, setContent] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [tokenInstance, setTokenInstance] = useState();\n  const [tokenSaleInstance, setTokenSaleInstance] = useState();\n  const [success, setSuccess] = useState(false);\n  const [supply, setSupply] = useState('');\n  const [disabled, setDisabled] = useState(false);\n\n  let provider;\n  let web3;\n  let accounts = [];\n\n  if (typeof window.ethereum !== 'undefined') {\n    provider = window.ethereum;\n    web3 = new Web3(provider);\n  } else {\n    provider = new Web3.providers.HttpProvider(\n      'https://rinkeby.infura.io/v3/108fe4c89c274ccebbd2e19013757153'\n    );\n\n    web3 = new Web3(provider);\n  }\n\n  const loadBlockchain = async () => {\n    const instance = await new web3.eth.Contract(\n      tokenSale_abi,\n      '0x606552d0A716219eeFbe577A15daAB83d2E17344'\n    );\n    setTokenSaleInstance(instance);\n\n    const p = web3.utils.fromWei(\n      await instance.methods.tokenPrice().call(),\n      'ether'\n    );\n    setPrice(p);\n  };\n\n  const getAccounts = async () => {\n    accounts = window.ethereum.on('accountsChanged', (accounts) =>\n      setAccount(accounts[0])\n    );\n    if (account === 'Wallet not connected') {\n      accounts = await window.ethereum.request({ method: 'eth_accounts' });\n      setAccount(accounts[0]);\n    }\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setContent(null);\n    setLoading(true);\n    setDisabled(true);\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts',\n      });\n\n      await tokenSaleInstance.methods.buyToken(value).send({\n        from: accounts[0],\n        value: web3.utils.toWei((value * price).toString(), 'ether'),\n      });\n      setSuccess(true);\n      setContent('SUCCESS!');\n    } catch (err) {\n      setContent(err.message);\n      console.log(err);\n    }\n    setLoading(false);\n    setValue('');\n    setDisabled(false);\n  };\n\n  useEffect(() => {\n    getAccounts();\n    loadBlockchain();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const instance = await new web3.eth.Contract(\n        token_abi,\n        '0xf0fB2a440D5895C2Fa9f27C57D74d820F0D6A734'\n      );\n      setTokenInstance(instance);\n      if (\n        (account !== 'Wallet not connected') &\n        (typeof account !== 'undefined')\n      ) {\n        const b = await tokenInstance.methods.balanceOf(account).call();\n        setBalance(b);\n      }\n    })();\n  }, [account, content]);\n\n  useEffect(() => {\n    (async () => {\n      const instance1 = await new web3.eth.Contract(\n        tokenSale_abi,\n        '0x606552d0A716219eeFbe577A15daAB83d2E17344'\n      );\n      const instance2 = await new web3.eth.Contract(\n        token_abi,\n        '0xf0fB2a440D5895C2Fa9f27C57D74d820F0D6A734'\n      );\n      const t = await instance2.methods\n        .balanceOf(instance1.options.address)\n        .call();\n      setSupply(t);\n    })();\n  }, [content]);\n\n  return (\n    <Container textAlign='center' style={{ marginTop: '50px' }}>\n      <ButtonMeta />\n      <br />\n      <Header as='h1'> Introducing Decentralized App Token (DAPP)</Header>\n      <Header as='h3'>\n        Disclaimer : This is not a real world use-case token and is made for\n        educational and entertainment purpose.\n        <br />\n        The token has been deployed on the Rinkeby Test Network.\n      </Header>\n      <a href=''>\n        Click here to find out more about the source code of the DAPP token.\n      </a>\n      <Header as='h3'>1 DAPP = {price} ether.</Header>\n      <br />\n      <Form onSubmit={onSubmit} error={!!content} success={!!content}>\n        <Form.Field disabled={disabled}>\n          <Input\n            error\n            value={value}\n            placeholder='Enter whole numbers...'\n            action={{ color: 'teal', content: 'Buy Token' }}\n            onChange={(e) => setValue(e.target.value)}\n            loading={loading}\n          />\n        </Form.Field>\n        <Message success={success} error content={content}></Message>\n      </Form>\n      <br />\n      <Progress\n        color='violet'\n        value={750000 - supply}\n        total='750000'\n        progress='value'\n        label={`${750000 - supply} / 750,000 tokens sold`}\n      />\n      <br />\n      <Header as='h3' color='green'>\n        You currently have: {balance} DAPP\n      </Header>\n      <Header as='h4' color='grey'>\n        Your account: {account}\n      </Header>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}